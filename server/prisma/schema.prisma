// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  createdAt DateTime   @default(now())
  Character Character?
}

model Character {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  gender     Gender? // M, F, or null
  level      Int     @default(1)
  experience Int     @default(0)
  coins      Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plots           Plot[]
  questProgresses QuestProgress[]
}

model LevelRequirement {
  id         Int @id @default(autoincrement())
  level      Int @unique
  xpRequired Int
}

model Seed {
  id         Int         @id @default(autoincrement())
  key        String      @unique
  name       String
  texture    String
  growTime   Int // в миллисекундах
  xp         Int
  buyPrice   Int         @default(0) // стоимость посадки
  sellPrice  Int         @default(0) // прибыль при сборе
  Plot       Plot[]
  questSteps QuestStep[]
}

model Plot {
  id          Int       @id @default(autoincrement())
  characterId Int
  seedId      Int? // null если грядка пустая
  plantedAt   DateTime? // null если ничего не посажено
  isReady     Boolean   @default(false)

  character Character @relation(fields: [characterId], references: [id])
  seed      Seed?     @relation(fields: [seedId], references: [id])
}

enum QuestType {
  HARVEST
  PLANT
  LEVEL_UP
  BUY_PLOT
}

model Quest {
  id               Int             @id @default(autoincrement())
  title            String
  description      String
  recommendedLevel Int             @default(1)
  rewardXP         Int
  rewardCoins      Int
  steps            QuestStep[]
  progresses       QuestProgress[]
}

model QuestStep {
  id           Int       @id @default(autoincrement())
  quest        Quest     @relation(fields: [questId], references: [id])
  questId      Int
  type         QuestType
  targetSeed   Seed?     @relation(fields: [targetSeedId], references: [id])
  targetSeedId Int?
  targetAmount Int

  progress QuestStepProgress[]
}

model QuestProgress {
  id          Int                 @id @default(autoincrement())
  character   Character           @relation(fields: [characterId], references: [id])
  characterId Int
  quest       Quest               @relation(fields: [questId], references: [id])
  questId     Int
  steps       QuestStepProgress[]
  completed   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([characterId, questId])
}

model QuestStepProgress {
  id         Int           @id @default(autoincrement())
  step       QuestStep     @relation(fields: [stepId], references: [id])
  stepId     Int
  current    Int           @default(0)
  completed  Boolean       @default(false)
  progressId Int
  progress   QuestProgress @relation(fields: [progressId], references: [id])

  @@unique([progressId, stepId])
}

enum Gender {
  M
  F
}
